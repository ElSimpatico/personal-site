/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ButtonVariantType } from "./components/atoms/button/types";
import { IconNames } from "@core/types";
export { ButtonVariantType } from "./components/atoms/button/types";
export { IconNames } from "@core/types";
export namespace Components {
    interface UiButton {
        /**
          * Specifies the alternative text for screen readers
         */
        "accesibleLabel"?: string;
        /**
          * Specifies if button is disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies the link reference. If the property is filled the `a` element is rendered
         */
        "linkHref"?: string;
        /**
          * Specifies the link target.
         */
        "linkTarget"?: string;
        /**
          * Specifies the button variant
         */
        "variant"?: ButtonVariantType;
    }
    interface UiIcon {
        /**
          * Specifies the icon name to display
         */
        "name": IconNames;
    }
}
declare global {
    interface HTMLUiButtonElement extends Components.UiButton, HTMLStencilElement {
    }
    var HTMLUiButtonElement: {
        prototype: HTMLUiButtonElement;
        new (): HTMLUiButtonElement;
    };
    interface HTMLUiIconElement extends Components.UiIcon, HTMLStencilElement {
    }
    var HTMLUiIconElement: {
        prototype: HTMLUiIconElement;
        new (): HTMLUiIconElement;
    };
    interface HTMLElementTagNameMap {
        "ui-button": HTMLUiButtonElement;
        "ui-icon": HTMLUiIconElement;
    }
}
declare namespace LocalJSX {
    interface UiButton {
        /**
          * Specifies the alternative text for screen readers
         */
        "accesibleLabel"?: string;
        /**
          * Specifies if button is disabled
         */
        "disabled"?: boolean;
        /**
          * Specifies the link reference. If the property is filled the `a` element is rendered
         */
        "linkHref"?: string;
        /**
          * Specifies the link target.
         */
        "linkTarget"?: string;
        /**
          * Specifies the button variant
         */
        "variant"?: ButtonVariantType;
    }
    interface UiIcon {
        /**
          * Specifies the icon name to display
         */
        "name": IconNames;
    }
    interface IntrinsicElements {
        "ui-button": UiButton;
        "ui-icon": UiIcon;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ui-button": LocalJSX.UiButton & JSXBase.HTMLAttributes<HTMLUiButtonElement>;
            "ui-icon": LocalJSX.UiIcon & JSXBase.HTMLAttributes<HTMLUiIconElement>;
        }
    }
}
